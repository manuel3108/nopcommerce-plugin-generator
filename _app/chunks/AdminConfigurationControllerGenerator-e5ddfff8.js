import{O as p}from"./index-21292ce4.js";import{F as u}from"./File-9e84454c.js";import{C as l}from"./Class-1cfddca9.js";import{g as d,U as i,M as h,V as r,F as a,a as o}from"./Field-8508c4e2.js";import"./vendor-83d19bf2.js";import"./preload-helper-ec9aa979.js";class w{generate(t){const n="ConfigurationController",e=["Areas","Admin","Controllers"];return new u(n,"cs",e,this.generateContent(t,n,e))}generateContent(t,n,e){const s=new l(d(t.base.nameSpace,e),n,!1,!0);return s.inheritsFrom="BaseController",s.usings.push(new i("Nop.Web.Framework.Controllers")),s.usings.push(new i("System.Threading.Tasks")),s.usings.push(new i("Microsoft.AspNetCore.Mvc")),s.usings.push(new i(t.base.nameSpace+".Areas.Admin.Models")),this.generateConfigureGetMethod(t,s),s.toString()}generateConfigureGetMethod(t,n){const e=new h(r.Public,"Configure",!1,!0,"Task<IActionResult>");n.methods.push(e),n.addField(new a(r.Private,"_settingService","ISettingService",{hasGetterAndSetter:!1,isConstant:!1,additionalNewLine:!1,isReadonly:!0})),n.usings.push(new i("Nop.Services.Configuration")),n.addField(new a(r.Private,"_storeContext","IStoreContext",{hasGetterAndSetter:!1,isConstant:!1,additionalNewLine:!1,isReadonly:!0})),n.usings.push(new i("Nop.Core")),e.expressions.push("var storeScope = await _storeContext.GetActiveStoreScopeConfigurationAsync();"),e.expressions.push("var settings = await _settingService.LoadSettingAsync<"+t.base.pluginName+"Settings>(storeScope);"),e.expressions.push(""),e.expressions.push("var model = new ConfigurationModel"),e.expressions.push("{"),e.expressions.push(o(1)+"ActiveStoreScopeConfiguration = storeScope,"),t.settings.properties.forEach(s=>{e.expressions.push(o(1)+s.name+" = settings."+s.name+",")}),e.expressions.push("};"),e.expressions.push(""),e.expressions.push("if (storeScope > 0)"),e.expressions.push("{"),t.settings.properties.forEach(s=>{e.expressions.push(o(1)+"model."+s.name+p+" = await _settingService.SettingExistsAsync(settings, settings => settings."+s.name+", storeScope);")}),e.expressions.push("}"),e.expressions.push(""),e.expressions.push('return View("~/Plugins/'+t.details.systemName+'/Areas/Admin/Views/Configuration.cshtml", model);')}}export{w as default};
