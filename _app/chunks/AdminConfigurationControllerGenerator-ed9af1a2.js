import{g as h,O as p,a as o}from"./index-70878895.js";import{F as g}from"./File-9e84454c.js";import{C as l}from"./Class-64f78858.js";import{F as u}from"./Field-71b02e76.js";import{F as a}from"./FieldAttribute-df44d096.js";import{U as r,M as d,V as i,P as m}from"./ClassBase-bd07e1e4.js";import"./vendor-70f8720b.js";import"./preload-helper-ec9aa979.js";class F{generate(t){const n=t.base.pluginName+"ConfigurationController",e=["Areas","Admin","Controllers"];return[new g(n,"cs",e,this.generateContent(t,n,e))]}generateContent(t,n,e){const s=new l(h(t.base.nameSpace,e),n,{addCtor:!0,addRegions:!0,attributes:[new a("AuthorizeAdmin"),new a("Area(AreaNames.Admin)")]});return s.inheritsFrom="BaseController",s.usings.push(new r("Nop.Web.Framework.Controllers")),s.usings.push(new r("System.Threading.Tasks")),s.usings.push(new r("Microsoft.AspNetCore.Mvc")),s.usings.push(new r("Nop.Web.Framework.Mvc.Filters")),s.usings.push(new r("Nop.Web.Framework")),s.usings.push(new r(t.base.nameSpace+".Areas.Admin.Models")),this.generateConfigureGetMethod(t,s),this.generateConfigurePostMethod(t,s),s.toString()}generateConfigurePostMethod(t,n){const e=new d(i.Public,"Configure",{override:!1,async:!0,returnType:"Task<IActionResult>",attribute:new a("HttpPost")});e.parameters.push(new m("ConfigurationModel","model")),n.methods.push(e),e.expressions.push("var storeScope = await _storeContext.GetActiveStoreScopeConfigurationAsync();"),e.expressions.push("var settings = await _settingService.LoadSettingAsync<"+t.base.pluginName+"Settings>(storeScope);"),e.expressions.push(""),t.settings.properties.forEach(s=>{e.expressions.push("settings."+s.name+" = model."+s.name+";")}),e.expressions.push(""),t.settings.properties.forEach(s=>{e.expressions.push(`await _settingService.SaveSettingOverridablePerStoreAsync(settings, setting => setting.${s.name}, model.${s.name+p}, storeScope, false);`)}),e.expressions.push(""),e.expressions.push("await _settingService.ClearCacheAsync();"),e.expressions.push(""),e.expressions.push("return await Configure();")}generateConfigureGetMethod(t,n){const e=new d(i.Public,"Configure",{override:!1,async:!0,returnType:"Task<IActionResult>"});n.methods.push(e),n.addField(new u(i.Private,"_settingService","ISettingService",{hasGetterAndSetter:!1,isConstant:!1,additionalNewLine:!1,isReadonly:!0,isProperty:!1})),n.usings.push(new r("Nop.Services.Configuration")),n.addField(new u(i.Private,"_storeContext","IStoreContext",{hasGetterAndSetter:!1,isConstant:!1,additionalNewLine:!1,isReadonly:!0,isProperty:!1})),n.usings.push(new r("Nop.Core")),e.expressions.push("var storeScope = await _storeContext.GetActiveStoreScopeConfigurationAsync();"),e.expressions.push("var settings = await _settingService.LoadSettingAsync<"+t.base.pluginName+"Settings>(storeScope);"),e.expressions.push(""),e.expressions.push("var model = new ConfigurationModel"),e.expressions.push("{"),e.expressions.push(o(1)+"ActiveStoreScopeConfiguration = storeScope,"),t.settings.properties.forEach(s=>{e.expressions.push(o(1)+s.name+" = settings."+s.name+",")}),e.expressions.push("};"),e.expressions.push(""),e.expressions.push("if (storeScope > 0)"),e.expressions.push("{"),t.settings.properties.forEach(s=>{e.expressions.push(o(1)+"model."+s.name+p+" = await _settingService.SettingExistsAsync(settings, settings => settings."+s.name+", storeScope);")}),e.expressions.push("}"),e.expressions.push(""),e.expressions.push('return View("~/Plugins/'+t.details.systemName+'/Areas/Admin/Views/Configuration/Configure.cshtml", model);')}}export{F as default};
