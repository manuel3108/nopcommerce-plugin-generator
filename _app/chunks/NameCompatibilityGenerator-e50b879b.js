import{g as p,a as n,L as m}from"./index-70878895.js";import{F as d}from"./File-9e84454c.js";import{C as c}from"./Class-64f78858.js";import{F as l}from"./Field-71b02e76.js";import{U as r,V as o}from"./ClassBase-bd07e1e4.js";import"./vendor-70f8720b.js";import"./preload-helper-ec9aa979.js";class h{generate(a){const t=[],i=["Mapping"],e="NameCompatibility",s=new d(e,"cs",i,this.generateContent(a,i,e));return t.push(s),t}generateContent(a,t,i){const e=new c(p(a.base.nameSpace,t),i,{addCtor:!1,addRegions:!1});return e.inheritsFrom="INameCompatibility",e.usings.push(new r("Nop.Data.Mapping")),e.usings.push(new r("System.Collections.Generic")),e.usings.push(new r(a.base.nameSpace+".Domain")),e.addField(new l(o.Public,"TableNames","Dictionary<Type, string>",{additionalNewLine:!0,hasGetterAndSetter:!1,isProperty:!0,isConstant:!1,isReadonly:!1,value:`new Dictionary<Type, string>
${n(2)}{
${a.database.entities.map(s=>`${n(3)}{ typeof(${s.className}), "${s.tableName||s.className}" }`).join(","+m)}
${n(2)}}`}),!1),e.addField(new l(o.Public,"ColumnName","Dictionary<(Type, string), string>()",{additionalNewLine:!1,hasGetterAndSetter:!1,isProperty:!0,isConstant:!1,isReadonly:!1,value:"new Dictionary<(Type, string), string>"}),!1),e.toString()}}export{h as default};
