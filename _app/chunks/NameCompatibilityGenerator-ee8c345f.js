import{g as p,a as r,L as m}from"./index-39154662.js";import{F as d}from"./File-9e84454c.js";import{C as f}from"./Class-770fa420.js";import{F as l}from"./Field-0b5875f9.js";import{U as n,V as o}from"./ClassBase-968f30af.js";import"./vendor-70f8720b.js";import"./preload-helper-ec9aa979.js";class h{generate(s){const t=[],i=["Mapping"],e="NameCompatibility",a=new d(e,"cs",i,this.generateContent(s,i,e));return t.push(a),t}generateContent(s,t,i){const e=new f(p(s.base.nameSpace,t),i,{addCtor:!1,addRegions:!1});return e.usings.push(new n("Nop.Data.Mapping")),e.usings.push(new n("System")),e.usings.push(new n("System.Collections.Generic")),e.usings.push(new n(s.base.nameSpace+".Domain")),e.addField(new l(o.Public,"TableNames","Dictionary<Type, string>",{additionalNewLine:!0,hasGetterAndSetter:!1,isProperty:!0,isConstant:!1,isReadonly:!1,value:`new Dictionary<Type, string>
${r(2)}{
${s.database.entities.map(a=>`${r(3)}{ typeof(${a.className}), "${a.tableName||a.className}" }`).join(","+m)}
${r(2)}}`}),!1),e.addField(new l(o.Public,"ColumnName","Dictionary<(Type, string), string>()",{additionalNewLine:!1,hasGetterAndSetter:!1,isProperty:!0,isConstant:!1,isReadonly:!1,value:"new Dictionary<(Type, string), string>"}),!1),e.toString()}}export{h as default};
